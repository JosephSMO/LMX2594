#include "tables.h"

// first 79 registers used for general purpose programming
const int totalRegisters = 79;

const RegisterMap bootupRegisters[] = {
    {0x4e, 0x0003},
    {0x4d, 0x0000},
    {0x4c, 0x000C},
    {0x4b, 0x0AC0},
    {0x4a, 0x0000},
    {0x49, 0x003F},
    {0x48, 0x0001},
    {0x47, 0x0081},
    {0x46, 0xC350},
    {0x45, 0x0000},
    {0x44, 0x03E8},
    {0x43, 0x0000},
    {0x42, 0x01F4},
    {0x41, 0x0000},
    {0x40, 0x1388},
    {0x3f, 0x0000},
    {0x3e, 0x0322},
    {0x3d, 0x00A8},
    {0x3c, 0x0000},
    {0x3b, 0x0001},
    {0x3a, 0x8001},
    {0x39, 0x0020},
    {0x38, 0x0000},
    {0x37, 0x0000},
    {0x36, 0x0000},
    {0x35, 0x0000},
    {0x34, 0x0820},
    {0x33, 0x0080},
    {0x32, 0x0000},
    {0x31, 0x4180},
    {0x30, 0x0300},
    {0x2f, 0x0300},
    {0x2e, 0x07FC},
    {0x2d, 0xC0C3},
    {0x2c, 0x10E3},
    {0x2b, 0x0000},
    {0x2a, 0x0000},
    {0x29, 0x0000},
    {0x28, 0x0000},
    {0x27, 0x03E8},
    {0x26, 0x0000},
    {0x25, 0x0304},
    {0x24, 0x0030},
    {0x23, 0x0004},
    {0x22, 0x0000},
    {0x21, 0x1E21},
    {0x20, 0x0393},
    {0x1f, 0x43EC},
    {0x1e, 0x318C},
    {0x1d, 0x318C},
    {0x1c, 0x0488},
    {0x1b, 0x0002},
    {0x1a, 0x0DB0},
    {0x19, 0x0624},
    {0x18, 0x071A},
    {0x17, 0x007C},
    {0x16, 0x0001},
    {0x15, 0x0401},
    {0x14, 0xE048},
    {0x13, 0x27B7},
    {0x12, 0x0064},
    {0x11, 0x012C},
    {0x10, 0x0080},
    {0xf,  0x064F},
    {0xe,  0x1E70},
    {0xd,  0x4000},
    {0xc,  0x5001},
    {0xb,  0x0018},
    {0xa,  0x10D8},
    {0x9,  0x1604},
    {0x8,  0x2000},
    {0x7,  0x40B2},
    {0x6,	 0xC802},
    {0x5,	 0x00C8},
    {0x4,	 0x0A43},
    {0x3,	 0x0642},
    {0x2,	 0x0500},
    {0x1,	 0x0808},
    {0x00, 0x2510}
};

const ChannelDividerTable channelDivider[] = {
    {2, 3750.0, 7500.0, 0, 2, 1, 1, 1, 0},
    {4, 1875.0, 3750.0, 1, 2, 2, 1, 1, 0},
    {6, 1250.0, 2500.0, 2, 2, 3, 1, 1, 0},
    {8, 937.5, 1437.5, 3, 2, 2, 2, 1, 1},
    {12, 625.0, 958.333, 4, 2, 3, 2, 1, 1},
    {16, 468.75, 718.75, 5, 2, 2, 4, 1, 1},
    {24, 312.5, 479.167, 6, 2, 2, 6, 1, 1},
    {32, 234.375, 359.375, 7, 2, 2, 8, 1, 1},
    {48, 156.25, 239.583, 8, 2, 3, 8, 1, 1},
    {64, 117.1875, 179.6875, 9, 2, 2, 8, 2, 1},
    {72, 104.167, 159.722, 10, 2, 3, 6, 2, 1},
    {96, 78.125, 119.792, 11, 2, 3, 8, 2, 1},
    {128, 58.594, 89.844, 12, 2, 2, 8, 4, 1},
    {192, 39.0625, 59.896, 13, 2, 2, 8, 6, 1},
    {256, 29.297, 44.922, 14, 2, 2, 8, 8, 1},
    {384, 19.531, 29.948, 15, 2, 3, 8, 8, 1},
    {512, 14.648, 22.461, 16, 2, 2, 8, 16, 1},
    {768, 9.766, 14.974, 17, 2, 3, 8, 16, 1},
    {0, 0, 0, 18, 0, 0, 0, 0, 0}  // Representing the Invalid row
};

const MinimumNDividerRestrictionsTable nDivider[] = {
    {0, 0, 12500, 28, 1},
    {0, 12501, INT_MAX, 32, 2},
    {1, 0, 10000, 28, 1},
    {1, 10001, 12500, 32, 2},
    {1, 12501, INT_MAX, 36, 3},
    {2, 0, 10000, 32, 2},
    {2, 10001, INT_MAX, 36, 3},
    {3, 0, 10000, 36, 3},
    {3, 10001, INT_MAX, 40, 4},
    {4, 0, 10000, 44, 5},
    {4, 10001, INT_MAX, 48, 6},
    {0, 0, 0, 0, 0}  // End of table
};

